import argparse
import tempfile

import colorama
from colorama import Fore

from youtube_clipper.downloader import SubtitlesDownloader
from youtube_clipper.searcher import SubtitlesSearcher
from youtube_clipper.utils import get_available_formats, get_url_from_filename


def main() -> None:
    parser = argparse.ArgumentParser('youtube-clipper', description='YouTube Clipper - tool for finding youtube clips')
    parser.add_argument(
        '--url',
        required=True,
        help='can be any youtube URL supported by yt-dlp: a video, a channel, a playlist, etc; '
             'in case of multiple videos in the output, search will be performed for each video separately',
    )
    parser.add_argument('--query', required=True, help='query to search for')

    yt_dlp_args = parser.add_argument_group('yt-dlp arguments')
    yt_dlp_args.add_argument('--formats', nargs='*', help='subtitles formats to download')
    yt_dlp_args.add_argument('--language', default='en', help='subtitles language')
    yt_dlp_args.add_argument('--subs-dir', required=False, help='if specified, subs will be saved to a provided dir')
    yt_dlp_args.add_argument(
        '--allow-autogenerated', action='store_true', help='whether to allow downloading autogenerated subs'
    )
    yt_dlp_args.add_argument('--verbose', action='store_true', help='print debug info from yt-dlp')
    yt_dlp_args.add_argument('--quiet', action='store_true', help='hide an output from yt-dlp')

    searcher_args = parser.add_argument_group('searcher arguments')
    searcher_args.add_argument(
        '--show-scores',
        action='store_true',
        help='if set, will show a search score next to a link',
    )
    searcher_args.add_argument('--search-limit', required=False, type=int, help='limit for search results per video')
    searcher_args.add_argument(
        '--deduplication-range',
        required=False,
        type=float,
        help='if set, will deduplicate results with offsets within provided range',
    )

    args = parser.parse_args()
    colorama.init(autoreset=True)
    available_formats = get_available_formats()
    formats = args.formats or available_formats
    unsupported_formats = set(formats) - set(available_formats)
    if unsupported_formats:
        print(Fore.YELLOW + 'Warning: some of provided formats aren\'t supported:', *unsupported_formats)

    with tempfile.TemporaryDirectory() as tempdir:
        subs_dir = args.subs_dir or tempdir
        downloader = SubtitlesDownloader(
            language=args.language,
            formats=formats,
            allow_autogenerated=args.allow_autogenerated,
            output_dir=subs_dir,
            verbose=args.verbose,
            quiet=args.quiet,
        )

        for filename in downloader.get_subtitles(args.url):
            video_url = get_url_from_filename(filename)
            print(Fore.YELLOW + f'Searching for `{args.query}` in {video_url}')

            searcher = SubtitlesSearcher(
                index_directory=tempdir,
                limit=args.search_limit,
                deduplication_range=args.deduplication_range,
            )
            searcher.add_subtitles(filename)
            results = searcher.search(args.query)
            if not results:
                print(Fore.RED + f'`{args.query}` wasn\'t found in {video_url}')
            else:
                print(Fore.GREEN + f'Found {len(results)} (approximate) occurrences of `{args.query}` in {video_url}')
                for result in results:
                    score_str = Fore.RESET + f'(score: {result.score})' if args.show_scores else ''
                    print(Fore.GREEN + f'{video_url}&t={int(result.offset)}s {score_str}')


if __name__ == '__main__':
    main()
