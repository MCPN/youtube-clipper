import argparse
import tempfile
from pathlib import Path

import colorama
from colorama import Fore

from youtube_clipper.downloader import SubtitlesDownloader
from youtube_clipper.searcher import SubtitlesSearcher


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument('--url', required=True)
    parser.add_argument('--query', required=True)
    parser.add_argument('--formats', nargs='*')
    parser.add_argument('--subs-dir', required=False)
    parser.add_argument('--language', default='en')
    parser.add_argument('--allow-autogenerated', action='store_true')
    parser.add_argument('--verbose', action='store_true')
    parser.add_argument('--quiet', action='store_true')
    parser.add_argument('--show-scores', action='store_true')
    args = parser.parse_args()

    colorama.init(autoreset=True)

    with tempfile.TemporaryDirectory() as tempdir:
        subs_dir = args.subs_dir or tempdir
        downloader = SubtitlesDownloader(
            language=args.language,
            formats=args.formats or ['str', 'ttml'],
            allow_autogenerated=args.allow_autogenerated,
            output_dir=subs_dir,
            verbose=args.verbose,
            quiet=args.quiet,
        )

        for filename in downloader.get_subtitles(args.url):
            # Path(filename).stem would only remove the last extension, and
            # a file from SubtitlesDownloader.download_subtitles would typically
            # have multiple, e.g. *.en.ttml
            path = Path(filename)
            video_id = path.name.removesuffix(''.join(path.suffixes))
            video_url = f'https://www.youtube.com/watch?v={video_id}'
            print(Fore.YELLOW + f'Searching for "{args.query}" in {video_url}')

            searcher = SubtitlesSearcher(tempdir)
            searcher.add_subtitles(filename)
            results = searcher.search(args.query)
            if not results:
                print(Fore.RED + f'`{args.query}` wasn\'t found in {video_url}')
            else:
                print(Fore.GREEN + f'Found {len(results)} (approximate) occurrences of `{args.query}` in {video_url}:')
                for result in results:
                    score_str = Fore.RESET + f'(score: {result.score})' if args.show_scores else ''
                    print(Fore.GREEN + f'{video_url}&t={int(result.offset)}s {score_str}')


if __name__ == '__main__':
    main()
